generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url      = "postgresql://postgres:admin@postgres_prisma:5432/dynasty_api?schema=database&sslmode=prefer"
}

model Admin {
  id        String   @id @unique @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  userName  String?
  phone     String?
  avatar    String?  @default("https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y")
  salt      String?
  role      Role     @default(ADMIN)
  isAdmin   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Customer {
  id        String   @id @unique @default(uuid())
  social    String?
  email     String   @unique
  password  String?
  firstName String
  lastName  String
  userName  String
  phone     String
  salt      String?
  Cart      Cart[]
  avatar    String?  @default("https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y")
  role      Role     @default(USER)
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Cart {
  id         String   @id @unique @default(uuid())
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId  String
  quantity   Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
}

model Product {
  id          String   @id @unique @default(uuid())
  name        String
  description String
  price       Json
  images      String[]
  depo        String
  category    String
  Cart        Cart[]
  brand       String?  @default("Custom")
  rating      Int?     @default(0)
  numReviews  Int?     @default(0)
  numInStock  Int?     @default(0)
  colors      String[] @default([])
  sizes       String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

model Employee {
  id          String       @id @unique @default(uuid())
  email       String?      @unique
  firstName   String
  lastName    String
  phoneNumber String
  designation String
  avatar      String?      @default("https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y")
  attendance  Attendance[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt()
}

model Attendance {
  id         String   @id @unique @default(uuid())
  startTime  String
  closeTime  String?
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
}

enum Role {
  USER
  ADMIN
}
